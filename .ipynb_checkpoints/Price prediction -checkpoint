{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b397a9dc-fc37-4547-a4f9-57ce0e0e2874",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from matplotlib import pyplot as plt\n",
    "%matplotlib inline\n",
    "import matplotlib \n",
    "matplotlib.rcParams[\"figure.figsize\"] = (20,10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "8e8b95f2-eb4f-4979-9294-0ed864248b78",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>area_type</th>\n",
       "      <th>availability</th>\n",
       "      <th>location</th>\n",
       "      <th>size</th>\n",
       "      <th>society</th>\n",
       "      <th>total_sqft</th>\n",
       "      <th>bath</th>\n",
       "      <th>balcony</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Super built-up  Area</td>\n",
       "      <td>19-Dec</td>\n",
       "      <td>Electronic City Phase II</td>\n",
       "      <td>2 BHK</td>\n",
       "      <td>Coomee</td>\n",
       "      <td>1056</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>39.07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Plot  Area</td>\n",
       "      <td>Ready To Move</td>\n",
       "      <td>Chikka Tirupathi</td>\n",
       "      <td>4 Bedroom</td>\n",
       "      <td>Theanmp</td>\n",
       "      <td>2600</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>120.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Built-up  Area</td>\n",
       "      <td>Ready To Move</td>\n",
       "      <td>Uttarahalli</td>\n",
       "      <td>3 BHK</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1440</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>62.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Super built-up  Area</td>\n",
       "      <td>Ready To Move</td>\n",
       "      <td>Lingadheeranahalli</td>\n",
       "      <td>3 BHK</td>\n",
       "      <td>Soiewre</td>\n",
       "      <td>1521</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>95.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Super built-up  Area</td>\n",
       "      <td>Ready To Move</td>\n",
       "      <td>Kothanur</td>\n",
       "      <td>2 BHK</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1200</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>51.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              area_type   availability                  location       size  \\\n",
       "0  Super built-up  Area         19-Dec  Electronic City Phase II      2 BHK   \n",
       "1            Plot  Area  Ready To Move          Chikka Tirupathi  4 Bedroom   \n",
       "2        Built-up  Area  Ready To Move               Uttarahalli      3 BHK   \n",
       "3  Super built-up  Area  Ready To Move        Lingadheeranahalli      3 BHK   \n",
       "4  Super built-up  Area  Ready To Move                  Kothanur      2 BHK   \n",
       "\n",
       "   society total_sqft  bath  balcony   price  \n",
       "0  Coomee        1056   2.0      1.0   39.07  \n",
       "1  Theanmp       2600   5.0      3.0  120.00  \n",
       "2      NaN       1440   2.0      3.0   62.00  \n",
       "3  Soiewre       1521   3.0      1.0   95.00  \n",
       "4      NaN       1200   2.0      1.0   51.00  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1 = pd.read_csv(\"Bengaluru_House_Data.csv\")\n",
    "df1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d158def5-63f3-4fb4-8445-8e438029f9a2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(13320, 5)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2 = df1.drop(['area_type','society','balcony','availability'],axis='columns')\n",
    "df2.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "0882adb3-8f80-40c6-a406-0a7866a6b9db",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "location       1\n",
       "size          16\n",
       "total_sqft     0\n",
       "bath          73\n",
       "price          0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "2b419c31-da58-4a4d-9180-940e039f576f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "location      0\n",
       "size          0\n",
       "total_sqft    0\n",
       "bath          0\n",
       "price         0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3 = df2.dropna()\n",
    "df3.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "04dd5bb9-6ce1-4cc6-9832-584736535c70",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Mannu\\AppData\\Local\\Temp\\ipykernel_46084\\2716584372.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df3['bhk'] = df3['size'].apply(lambda x: int(x.split(' ')[0]))\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([ 2,  4,  3,  6,  1,  8,  7,  5, 11,  9, 27, 10, 19, 16, 43, 14, 12,\n",
       "       13, 18])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3['bhk'] = df3['size'].apply(lambda x: int(x.split(' ')[0]))\n",
    "df3.bhk.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "62090635-56cd-4b04-ad74-606d9a65ec5f",
   "metadata": {},
   "outputs": [],
   "source": [
    "def is_float(x):\n",
    "    try:\n",
    "        float(x)\n",
    "    except:\n",
    "        return False\n",
    "    return True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "6290aefc-86a2-4a7b-bbe3-12e9a267723c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>location</th>\n",
       "      <th>size</th>\n",
       "      <th>total_sqft</th>\n",
       "      <th>bath</th>\n",
       "      <th>price</th>\n",
       "      <th>bhk</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>Yelahanka</td>\n",
       "      <td>4 BHK</td>\n",
       "      <td>2100 - 2850</td>\n",
       "      <td>4.0</td>\n",
       "      <td>186.000</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>122</th>\n",
       "      <td>Hebbal</td>\n",
       "      <td>4 BHK</td>\n",
       "      <td>3067 - 8156</td>\n",
       "      <td>4.0</td>\n",
       "      <td>477.000</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>137</th>\n",
       "      <td>8th Phase JP Nagar</td>\n",
       "      <td>2 BHK</td>\n",
       "      <td>1042 - 1105</td>\n",
       "      <td>2.0</td>\n",
       "      <td>54.005</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>165</th>\n",
       "      <td>Sarjapur</td>\n",
       "      <td>2 BHK</td>\n",
       "      <td>1145 - 1340</td>\n",
       "      <td>2.0</td>\n",
       "      <td>43.490</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>188</th>\n",
       "      <td>KR Puram</td>\n",
       "      <td>2 BHK</td>\n",
       "      <td>1015 - 1540</td>\n",
       "      <td>2.0</td>\n",
       "      <td>56.800</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>410</th>\n",
       "      <td>Kengeri</td>\n",
       "      <td>1 BHK</td>\n",
       "      <td>34.46Sq. Meter</td>\n",
       "      <td>1.0</td>\n",
       "      <td>18.500</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549</th>\n",
       "      <td>Hennur Road</td>\n",
       "      <td>2 BHK</td>\n",
       "      <td>1195 - 1440</td>\n",
       "      <td>2.0</td>\n",
       "      <td>63.770</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>648</th>\n",
       "      <td>Arekere</td>\n",
       "      <td>9 Bedroom</td>\n",
       "      <td>4125Perch</td>\n",
       "      <td>9.0</td>\n",
       "      <td>265.000</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>661</th>\n",
       "      <td>Yelahanka</td>\n",
       "      <td>2 BHK</td>\n",
       "      <td>1120 - 1145</td>\n",
       "      <td>2.0</td>\n",
       "      <td>48.130</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>672</th>\n",
       "      <td>Bettahalsoor</td>\n",
       "      <td>4 Bedroom</td>\n",
       "      <td>3090 - 5002</td>\n",
       "      <td>4.0</td>\n",
       "      <td>445.000</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               location       size      total_sqft  bath    price  bhk\n",
       "30            Yelahanka      4 BHK     2100 - 2850   4.0  186.000    4\n",
       "122              Hebbal      4 BHK     3067 - 8156   4.0  477.000    4\n",
       "137  8th Phase JP Nagar      2 BHK     1042 - 1105   2.0   54.005    2\n",
       "165            Sarjapur      2 BHK     1145 - 1340   2.0   43.490    2\n",
       "188            KR Puram      2 BHK     1015 - 1540   2.0   56.800    2\n",
       "410             Kengeri      1 BHK  34.46Sq. Meter   1.0   18.500    1\n",
       "549         Hennur Road      2 BHK     1195 - 1440   2.0   63.770    2\n",
       "648             Arekere  9 Bedroom       4125Perch   9.0  265.000    9\n",
       "661           Yelahanka      2 BHK     1120 - 1145   2.0   48.130    2\n",
       "672        Bettahalsoor  4 Bedroom     3090 - 5002   4.0  445.000    4"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3[~df3['total_sqft'].apply(is_float)].head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "93dd570d-dd8a-4c15-841f-9294988ccc10",
   "metadata": {},
   "outputs": [],
   "source": [
    "def convert_sqft_to_num(x):\n",
    "    tokens = x.split('-')\n",
    "    if len(tokens) == 2:\n",
    "        return (float(tokens[0])+float(tokens[1]))/2\n",
    "    try:\n",
    "        return float(x)\n",
    "    except:\n",
    "        return None   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "fcee7a58-545f-4824-a072-cb71736e6483",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>location</th>\n",
       "      <th>size</th>\n",
       "      <th>total_sqft</th>\n",
       "      <th>bath</th>\n",
       "      <th>price</th>\n",
       "      <th>bhk</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Electronic City Phase II</td>\n",
       "      <td>2 BHK</td>\n",
       "      <td>1056.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>39.07</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Chikka Tirupathi</td>\n",
       "      <td>4 Bedroom</td>\n",
       "      <td>2600.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>120.00</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   location       size  total_sqft  bath   price  bhk\n",
       "0  Electronic City Phase II      2 BHK      1056.0   2.0   39.07    2\n",
       "1          Chikka Tirupathi  4 Bedroom      2600.0   5.0  120.00    4"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "df4 = df3.copy()\n",
    "df4.total_sqft = df4.total_sqft.apply(convert_sqft_to_num)\n",
    "df4 = df4[df4.total_sqft.notnull()]\n",
    "df4.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "8ef4ffe2-c701-459b-99ae-ea44f5428f7e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>location</th>\n",
       "      <th>size</th>\n",
       "      <th>total_sqft</th>\n",
       "      <th>bath</th>\n",
       "      <th>price</th>\n",
       "      <th>bhk</th>\n",
       "      <th>price_per_sqft</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Electronic City Phase II</td>\n",
       "      <td>2 BHK</td>\n",
       "      <td>1056.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>39.07</td>\n",
       "      <td>2</td>\n",
       "      <td>3699.810606</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Chikka Tirupathi</td>\n",
       "      <td>4 Bedroom</td>\n",
       "      <td>2600.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>120.00</td>\n",
       "      <td>4</td>\n",
       "      <td>4615.384615</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Uttarahalli</td>\n",
       "      <td>3 BHK</td>\n",
       "      <td>1440.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>62.00</td>\n",
       "      <td>3</td>\n",
       "      <td>4305.555556</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Lingadheeranahalli</td>\n",
       "      <td>3 BHK</td>\n",
       "      <td>1521.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>95.00</td>\n",
       "      <td>3</td>\n",
       "      <td>6245.890861</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Kothanur</td>\n",
       "      <td>2 BHK</td>\n",
       "      <td>1200.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>51.00</td>\n",
       "      <td>2</td>\n",
       "      <td>4250.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   location       size  total_sqft  bath   price  bhk  \\\n",
       "0  Electronic City Phase II      2 BHK      1056.0   2.0   39.07    2   \n",
       "1          Chikka Tirupathi  4 Bedroom      2600.0   5.0  120.00    4   \n",
       "2               Uttarahalli      3 BHK      1440.0   2.0   62.00    3   \n",
       "3        Lingadheeranahalli      3 BHK      1521.0   3.0   95.00    3   \n",
       "4                  Kothanur      2 BHK      1200.0   2.0   51.00    2   \n",
       "\n",
       "   price_per_sqft  \n",
       "0     3699.810606  \n",
       "1     4615.384615  \n",
       "2     4305.555556  \n",
       "3     6245.890861  \n",
       "4     4250.000000  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df5 = df4.copy()\n",
    "df5['price_per_sqft'] = df5['price']*100000/df5['total_sqft']\n",
    "df5.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "45b9a73b-1b8e-4ce5-90e8-fd8cae2be3df",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    1.320000e+04\n",
       "mean     7.920759e+03\n",
       "std      1.067272e+05\n",
       "min      2.678298e+02\n",
       "25%      4.267701e+03\n",
       "50%      5.438331e+03\n",
       "75%      7.317073e+03\n",
       "max      1.200000e+07\n",
       "Name: price_per_sqft, dtype: float64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df5_stats = df5['price_per_sqft'].describe()\n",
    "df5_stats"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "94302e56-39e0-4433-8d4c-1c6453368186",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "location\n",
       "Whitefield                               533\n",
       "Sarjapur  Road                           392\n",
       "Electronic City                          304\n",
       "Kanakpura Road                           264\n",
       "Thanisandra                              235\n",
       "                                        ... \n",
       "Kanakapura main  Road                      1\n",
       "Masjid e Alkareem                          1\n",
       "Sindhi Colony                              1\n",
       "Kanakapur main road                        1\n",
       "Bidere Agarahara, Behind Safal market      1\n",
       "Name: count, Length: 1287, dtype: int64"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df5.location = df5.location.apply(lambda x: x.strip())\n",
    "location_stats = df5['location'].value_counts(ascending=False)\n",
    "location_stats"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "25ecb176-5db9-406b-8d97-d1293328c016",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "location\n",
       "Ganga Nagar                              10\n",
       "1st Block Koramangala                    10\n",
       "Dodsworth Layout                         10\n",
       "Nagadevanahalli                          10\n",
       "Thyagaraja Nagar                         10\n",
       "                                         ..\n",
       "Kanakapura main  Road                     1\n",
       "Masjid e Alkareem                         1\n",
       "Sindhi Colony                             1\n",
       "Kanakapur main road                       1\n",
       "Bidere Agarahara, Behind Safal market     1\n",
       "Name: count, Length: 1047, dtype: int64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "location_stats_less_than_10 = location_stats[location_stats<=10]\n",
    "location_stats_less_than_10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "c609de81-1bee-431f-9ee6-17832c8949f6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "241"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df5.location = df5.location.apply(lambda x: 'other' if x in location_stats_less_than_10 else x)\n",
    "len(df5.location.unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "c5017aa4-2b36-4fc5-a506-d0e17e6385c2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>location</th>\n",
       "      <th>size</th>\n",
       "      <th>total_sqft</th>\n",
       "      <th>bath</th>\n",
       "      <th>price</th>\n",
       "      <th>bhk</th>\n",
       "      <th>price_per_sqft</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>other</td>\n",
       "      <td>6 Bedroom</td>\n",
       "      <td>1020.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>370.0</td>\n",
       "      <td>6</td>\n",
       "      <td>36274.509804</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>HSR Layout</td>\n",
       "      <td>8 Bedroom</td>\n",
       "      <td>600.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>200.0</td>\n",
       "      <td>8</td>\n",
       "      <td>33333.333333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>58</th>\n",
       "      <td>Murugeshpalya</td>\n",
       "      <td>6 Bedroom</td>\n",
       "      <td>1407.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>150.0</td>\n",
       "      <td>6</td>\n",
       "      <td>10660.980810</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>68</th>\n",
       "      <td>Devarachikkanahalli</td>\n",
       "      <td>8 Bedroom</td>\n",
       "      <td>1350.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>85.0</td>\n",
       "      <td>8</td>\n",
       "      <td>6296.296296</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>70</th>\n",
       "      <td>other</td>\n",
       "      <td>3 Bedroom</td>\n",
       "      <td>500.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>3</td>\n",
       "      <td>20000.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               location       size  total_sqft  bath  price  bhk  \\\n",
       "9                 other  6 Bedroom      1020.0   6.0  370.0    6   \n",
       "45           HSR Layout  8 Bedroom       600.0   9.0  200.0    8   \n",
       "58        Murugeshpalya  6 Bedroom      1407.0   4.0  150.0    6   \n",
       "68  Devarachikkanahalli  8 Bedroom      1350.0   7.0   85.0    8   \n",
       "70                other  3 Bedroom       500.0   3.0  100.0    3   \n",
       "\n",
       "    price_per_sqft  \n",
       "9     36274.509804  \n",
       "45    33333.333333  \n",
       "58    10660.980810  \n",
       "68     6296.296296  \n",
       "70    20000.000000  "
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df5[df5.total_sqft/df5.bhk<300].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "d0dd5b96-c4b3-4083-96a4-b5b9a4b96214",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(12456, 7)"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df6 = df5[~(df5.total_sqft/df5.bhk<300)]\n",
    "df6.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "61be2c0f-cda6-406c-9c69-e7fc6aa706da",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10242, 7)"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "def remove_pps_outliers(df):\n",
    "    df_out = pd.DataFrame()\n",
    "    for key, subdf in df.groupby('location'):\n",
    "        m = np.mean(subdf.price_per_sqft)\n",
    "        st = np.std(subdf.price_per_sqft)\n",
    "        reduced_df = subdf[(subdf.price_per_sqft>(m-st)) & (subdf.price_per_sqft<=(m+st))]\n",
    "        df_out = pd.concat([df_out,reduced_df],ignore_index=True)\n",
    "    return df_out\n",
    "df7 = remove_pps_outliers(df6)\n",
    "df7.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "83db8ffe-b354-4602-a0bf-ae690f99c7be",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAABNYAAANXCAYAAAD5PtJMAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjkuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/TGe4hAAAACXBIWXMAAA9hAAAPYQGoP6dpAAB89klEQVR4nOzdeXidZZ0//vdJ03Q5ISlbU5DiAnzBIgiKM9YCbsgiSqHIjCOyjaMCRaEVBusPZVEsKsOiY4sz8gUVGB0QlGUEC0KhLIogioAoiFSBFpQvCTmEpknO749MQ0O35DR7Xq/rOlee537u85zP0x4KvHsvhXK5XA4AAAAA0CtVg10AAAAAAAxHgjUAAAAAqIBgDQAAAAAqIFgDAAAAgAoI1gAAAACgAoI1AAAAAKiAYA0AAAAAKiBYAwAAAIAKCNYAAAAAoAKCNQCAIa5QKOSMM87o9ftuu+22FAqF3HbbbV1tRx99dF73utf1WW0AAKOZYA0AoI9ceumlKRQKXa/q6uq85jWvydFHH52nnnpqsMvrlXe9610pFAr54Ac/uMa1P/3pTykUCjn33HMHoTIAgKGjerALAAAYac4666y8/vWvz8svv5x77rknl156aZYsWZLf/va3GT9+fK/v19LSkurq3v9n2957752WlpbU1NR0tf3nf/5nOjo6enyP66+/Pvfdd1/e+ta39vrzAQBGOiPWAAD62AEHHJCPfvSj+Zd/+Zd8+9vfzsknn5zHH3881157bUX3Gz9+fEXBWlVVVcaPH5+qqlf+k2/s2LEZN25cj96/7bbbZtNNN82ZZ57Z688ebKVSabBLAABGAcEaAEA/22uvvZIkjz/+eFdba2trvvCFL+Stb31r6uvrUywWs9dee+XWW29d4/2vXmPtySefzPHHH58dd9wxEyZMyOabb57DDjssf/rTn7q9b2PXWNtkk00yZ86cXHfddbn//vvX2/f555/PySefnF122SW1tbWpq6vLAQcckF//+tdr9H3yySdz0EEHpVgsZvLkyZkzZ05uuummNWq94447cthhh2XbbbfNuHHjMnXq1MyZMyctLS3d7nf00UentrY2jz/+eN7//vdnk002yeGHH96jZwQA2BimggIA9LNVgdemm27a1dbU1JRvf/vb+ad/+qd8/OMfz4svvpiLL744++23X37xi19kt912W+f97r333tx111358Ic/nG222SZ/+tOfsnDhwrzrXe/Kww8/nIkTJ/ZZ7SeeeGLOP//8nHHGGesdcffHP/4xP/rRj3LYYYfl9a9/fZYvX55vfetbeec735mHH344W2+9dZLOkWTvec978swzz+TEE0/MlClTcsUVV6w1ULzyyivz0ksv5bjjjsvmm2+eX/ziF/nGN76Rv/zlL7nyyiu79W1ra8t+++2XPffcM+eee26f/hoAAKyLYA0AoI81Njbmr3/9a15++eX8/Oc/z5lnnplx48blAx/4QFefTTfdNH/605+6rX/28Y9/PDvttFO+8Y1v5OKLL17n/Q888MB86EMf6tb2wQ9+MNOnT88Pf/jDHHHEEX32LHV1dTnppJNy+umn5/77789b3vKWtfbbZZdd8vvf/77btNMjjjgiO+20Uy6++OJ8/vOfT5J861vf6grhZs6cmST55Cc/md13332Ne37lK1/JhAkTus4/8YlPZPvtt8/nPve5LF26NNtuu23XtRUrVuSwww7L/Pnz++S5AQB6wlRQAIA+ts8++2TLLbfM1KlT86EPfSjFYjHXXnttttlmm64+Y8aM6QrVOjo68vzzz6etrS177LHHBqddrh42rVy5Mn/729+y/fbbZ9KkSRt8byVOPPHEDa61Nm7cuK5Qrb29PX/7299SW1ubHXfcsVtNN954Y17zmtfkoIMO6mobP358Pv7xj69xz9Wfs1Qq5a9//Wve8Y53pFwu51e/+tUa/Y877riKng8AoFKCNQCAPvbNb34zixYtylVXXZX3v//9+etf/7rWDQO+853vZNddd8348eOz+eabZ8stt8wNN9yQxsbG9d6/paUlX/jCFzJ16tSMGzcuW2yxRbbccsu88MILG3xvJerr63PSSSfl2muvXWuglXSGg+eff3522GGHbjX95je/6VbTk08+me222y6FQqHb+7fffvs17rl06dIcffTR2WyzzVJbW5stt9wy73znO5Nkjeesrq7uFlwCAAwEwRoAQB/7u7/7u+yzzz459NBDc+211+ZNb3pTPvKRj6S5ubmrz2WXXZajjz462223XS6++OLceOONWbRoUd7znveko6Njvff/1Kc+lbPPPjv/8A//kP/+7//OT3/60yxatCibb775Bt9bqRNPPDGTJk1a56i1L3/5y5k7d2723nvvXHbZZbnpppuyaNGi7LzzzhXV1N7enve973254YYbcuqpp+ZHP/pRFi1alEsvvTRJ1rjn6iPmAAAGijXWAAD60ZgxYzJ//vy8+93vzr//+7/ns5/9bJLkqquuyhve8IZcffXV3UZvnX766Ru851VXXZWjjjoq//Zv/9bV9vLLL+eFF17o8/pXWTVq7YwzzshRRx211pre/e53r7E23AsvvJAtttii6/y1r31tHn744ZTL5W7P/dhjj3V734MPPpjf//73+c53vpMjjzyyq33RokV99UgAABvNX+sBAPSzd73rXfm7v/u7XHDBBXn55ZeTdAZuSVIul7v6/fznP8/dd9+9wfuNGTOm2/uS5Bvf+Eba29v7sOo1nXTSSZk0aVLOOuusHtV05ZVX5qmnnurWtt9+++Wpp57qtsPoyy+/nP/8z/9c435J91+fcrmcCy+8cKOfAwCgrxixBgAwAE455ZQcdthhufTSS3PsscfmAx/4QK6++uoccsghOfDAA/PEE0/koosuyrRp07pNGV2bD3zgA/ne976X+vr6TJs2LXfffXduvvnmbL755v36DPX19TnxxBPXOh30Ax/4QM4666wcc8wxecc73pEHH3wwl19+ed7whjd06/fJT34y//7v/55/+qd/yoknnpitttoql19+ecaPH58kXaPYdtppp2y33XY5+eST89RTT6Wuri4//OEP8//+3//r12cEAOgNI9YAAAbArFmzst122+Xcc89Ne3t7jj766Hz5y1/Or3/963z605/OTTfdlMsuuyx77LHHBu914YUX5sgjj8zll1+ez3zmM3nmmWdy8803p7a2tt+f46STTkp9ff0a7Z/73Ofymc98JjfddFNOPPHE3H///bnhhhsyderUbv1qa2vzs5/9LO95z3ty4YUX5ktf+lL22muvfP7zn0+SroBt7Nixue6667Lbbrtl/vz5OfPMM7PDDjvku9/9br8/IwBATxXKrx6zDwDAkNHe3p7q6up88YtfzGmnndar995yyy3ZZ599cscdd2TPPffspwr7xgUXXJA5c+bkL3/5S17zmtcMdjkAAD1ixBoAwBD2zDPPJEm3DQAG4r39qaWlpdv5yy+/nG9961vZYYcdhGoAwLBijTUAgCHqqquuyne/+90UCoW8+93v7vH7SqVSLr/88lx44YXZZptt8n/+z//pxyp7b9asWdl2222z2267pbGxMZdddll+97vf5fLLLx/s0gAAekWwBgAwRP3rv/5rCoVCLr744uy44449ft9zzz2XT33qU9lll11yySWXpKpqaE1S2G+//fLtb387l19+edrb2zNt2rR8//vfzz/+4z8OdmkAAL1ijTUAAAAAqMDQ+utLAAAAABgmBGsAAAAAUAFrrCXp6OjI008/nU022SSFQmGwywEAAABgkJTL5bz44ovZeuutN7hWrWAtydNPP52pU6cOdhkAAAAADBF//vOfs80226y3j2AtySabbJKk8xesrq5ukKsBAAAAYLA0NTVl6tSpXXnR+gjWkq7pn3V1dYI1AAAAAHq0XJjNCwAAAACgAoI1AAAAAKiAYA0AAAAAKmCNtR5qb2/PypUrB7uMEW3MmDGprq7u0RxmAAAAgMEmWOuB5ubm/OUvf0m5XB7sUka8iRMnZquttkpNTc1glwIAAACwXoK1DWhvb89f/vKXTJw4MVtuuaXRVP2kXC6ntbU1zz33XJ544onssMMOqaoyUxkAAAAYugRrG7By5cqUy+VsueWWmTBhwmCXM6JNmDAhY8eOzZNPPpnW1taMHz9+sEsCAAAAWCdDgnrISLWBYZQaAAAAMFxIMQAAAACgAoI1AAAAAKiAYA0AAAAAKiBYG0AtLcny5Z0/+9v8+fPztre9LZtsskkmT56cgw8+OI8++uh633PGGWekUCh0verr67PXXntl8eLF3fq97nWvywUXXLDW9++2227rPE+SO+64I5MmTcpJJ52Ucrlc6eMBAAAADDrB2gBYsiSZNSuprU2mTOn8OWtWcued/feZixcvzuzZs3PPPfdk0aJFWblyZfbdd9+USqX1vm/nnXfOM888k2eeeSZ33313dthhh3zgAx9IY2PjRtd0ww03ZL/99svcuXNzwQUX2BACAAAAGNYEa/1s4cJk772T665LOjo62zo6Os/32iu56KL++dwbb7wxRx99dHbeeee8+c1vzqWXXpqlS5fmvvvuW+/7qqurM2XKlEyZMiXTpk3LWWedlebm5vz+97/fqHquuOKKzJo1K1/96lfzhS98YaPuBQAAADAUCNb60ZIlyezZSbmctLV1v9bW1tl+/PH9O3JtlVUjzjbbbLMev2fFihW55JJLMmnSpOy4444Vf/Y3v/nNHHPMMfm///f/5oQTTqj4PgAAAABDSfVgFzCSnXdeMmbMmqHa6saMSc4/P5kxo//q6OjoyEknnZQZM2bkTW9603r7Pvjgg6mtrU2SvPTSS9lkk03ygx/8IHV1dd36nXrqqTnttNO6tbW2tmbatGnd2h555JGccMIJufjii3P44Yf3wdMAAAAADA2CtX7S0pL8+MevTP9cl7a25JprOvtPmNA/tcyePTu//e1vs2TJkg323XHHHXPttdcmSV588cX84Ac/yGGHHZZbb701e+yxR1e/U045JUcffXS3937961/P7bff3q1tm222yaRJk/K1r30tBxxwQLbaaquNfyAAAACAIcBU0H7S1LThUG2Vjo7O/v3hhBNOyPXXX59bb70122yzzQb719TUZPvtt8/222+f3XffPeecc05e85rXrLEL6BZbbNHVb9VrbdNMN9lkk9x8880pFot597vfnWeeeaavHg0AAABgUAnW+kldXVLVw1/dqqrO/n2pXC7nhBNOyDXXXJOf/exnef3rX1/xvcaMGZOWlpaK37/pppvm5ptvTl1dXd71rnfl6aefrvheAAAAAEOFYK2fTJiQzJyZVG9gsm11dXLIIX0/DXT27Nm57LLLcsUVV2STTTbJsmXLsmzZsg0GZG1tbV19//CHP+RLX/pSHn744cycOXOj6pk0aVIWLVqUTTfdVLgGAAAAjAiCtX40d27S3r7+Pu3tyZw5ff/ZCxcuTGNjY971rndlq6226nr94Ac/WO/7Hnrooa6+u+22W/77v/87CxcuzJFHHrnRNdXX1+enP/1ptthii7zzne/MU089tdH3BAAAABgshXK5XB7sIgZbU1NT6uvr09jYuMbuly+//HKeeOKJvP71r8/48eN7fe+LLkqOP37N3UGrqztDtQULkmOP3dgnGDk29tcbAAAAYGOsLyd6NSPW+tmxxyZ33NE5LXTVmmtVVZ3nd9whVAMAAAAYrjawAhh9YcaMzldLS+fun3V1fb+mGgAAAAADS7A2gCZMEKgBAAAAjBSmggIAAABABQRrAAAAAFABwRoAAADAKFFqLaVwZiGFMwsptZYGu5xhT7AGAAAAABUQrAEAAABABewKCgAAADCCrT7ls7Ry7cdJUqwpDlhNI4VgDQAAAGAEq51fu9b2hnMbup2XTy8PRDkjiqmgI9TChQuz6667pq6uLnV1dZk+fXp+8pOfrPc9Z5xxRgqFQtervr4+e+21VxYvXtyt3+te97pccMEFa33/brvtts7zJLnjjjsyadKknHTSSSmX/QMLAAAADF9GrA2QUmupKyFuntfc78Mrt9lmm5xzzjnZYYcdUi6X853vfCczZ87Mr371q+y8887rfN/OO++cm2++OUny/PPP59xzz80HPvCB/OUvf0l9ff1G1XTDDTfksMMOy2c/+9l84Qtf2Kh7AQAAAD3TPK+567i0stQ1Um35yctTHGv658YwYm2E+uAHP5j3v//92WGHHfJ//s//ydlnn53a2trcc889631fdXV1pkyZkilTpmTatGk566yz0tzcnN///vcbVc8VV1yRWbNm5atf/apQDQAAAAZQsab4ymu1IK04ttjtGr1nxNoo0N7eniuvvDKlUinTp0/v8ftWrFiRSy65JJMmTcqOO+5Y8ed/85vfzNy5c/N//+//zeGHH17xfQAAAACGEsFaPxrsXTcefPDBTJ8+PS+//HJqa2tzzTXXZNq0aRt8T21t55TVl156KZtsskl+8IMfpK6urlu/U089Naeddlq3ttbW1jXu/8gjj+SEE07IxRdfLFQDAAAARhTBWj8a7F03dtxxxzzwwANpbGzMVVddlaOOOiqLFy9eb7i244475tprr02SvPjii/nBD36Qww47LLfeemv22GOPrn6nnHJKjj766G7v/frXv57bb7+9W9s222yTSZMm5Wtf+1oOOOCAbLXVVn33gAAAAECvFGuKdv/sQ4K1Eaympibbb799kuStb31r7r333lx44YX51re+1aP3JMnuu++eH/3oR7ngggty2WWXdbVvscUW3folyWabbbbG/TbZZJPcfPPNed/73pd3v/vdufXWW4VrAAAAwIggWOtHQ23XjY6OjqxYsaLX7xszZkxaWloq/txNN900N998c/bdd9+8613vyq233pqtt9664vsBAAAADAWCtX60rrXTVu260Z/mzZuXAw44INtuu21efPHFXHHFFbntttty0003rfd9bW1tWbZsWZJXpoI+/PDDOfXUUzeqnkmTJmXRokXZb7/98q53vSu33XabcA0AAAAY1gRrI9Szzz6bI488Ms8880zq6+uz66675qabbsr73ve+9b7voYce6pqqOXHixGy33XZZuHBhjjzyyI2uqb6+Pj/96U+z//77553vfGduu+22vOY1r9no+wIAAAAMhkK5XB71K9Y1NTWlvr4+jY2Na+x++fLLL+eJJ57I61//+owfP77izyi1lro2M2ie19zvI9aGq7769QYAAACoxPpyolczYm2A2HUDAAAAYGSpGuwCAAAAAGA4EqwBAAAAQAUEawAAAABQAcFaD9njYWD4dQYAAACGC8HaBowZMyZJ0traOsiVjA4vvfRSkmTs2LGDXAkAAADA+tkVdAOqq6szceLEPPfccxk7dmyqqmSR/aFcLuell17Ks88+m0mTJnUFmgAAAABDlWBtAwqFQrbaaqs88cQTefLJJwe7nBFv0qRJmTJlymCXAQAAQA+VWkupnV+bJGme15xiTXGQK4KBI1jrgZqamuywww6mg/azsWPHGqkGAAAADBuCtR6qqqrK+PHjB7sMAAAAAIYIwRoAAADQK6XW0ivHK9d+nMS0UEY8wRoAAADQK6vWVHu1hnMbup2XTy8PRDkwaGxxCQAAAAAVMGINAAAA6JXmec1dx6WVpa6RastPXp7iWNM/GT0EawAAAECvrGvttOLYonXVGFVMBQUAAACACgjWAAAAAKACpoICAAAAFSvWFO3+yahlxBoAAAAAVECwBgAAAFSs1FpK4cxCCmcWUmotDXY5MKAEawAAAABQAcEaAAAAAFTA5gUAAABAr6w+5bO0cu3HSefGBjCSCdYAAACAXqmdX7vW9oZzG7qd2y2Ukc5UUAAAAACogBFrAAAAQK80z2vuOi6tLHWNVFt+8vIUx5r+yeghWAMAAAB6ZV1rpxXHFq2rxqhiKigAAAAAVECwBgAAAAAVMBUUAAAAqFixpmj3T0YtI9YAAAAAoAKCNQAAAACogGANAAAAACogWAMAAACACgjWAAAAAKACgjUAAAAAeq3UWkrhzEIKZxZSai0NdjmDQrAGAAAAABUQrAEAAABABaoHuwAAAAAAhofVp3yWVq79OEmKNcUBq2kwCdYAAAAA6JHa+bVrbW84t6Hbefn08kCUM+hMBQUAAACAChixBgAAAECPNM9r7jourSx1jVRbfvLyFMeOjumfqxOsAQAAAKNCqbXUNZWxeV7zqFkHrC+t69esOLY4Kn89TQUFAAAAgAoMmWDtnHPOSaFQyEknndTV9vLLL2f27NnZfPPNU1tbm0MPPTTLly/v9r6lS5fmwAMPzMSJEzN58uSccsopaWtrG+DqAQAAABhthsRU0HvvvTff+ta3suuuu3ZrnzNnTm644YZceeWVqa+vzwknnJBZs2blzjvvTJK0t7fnwAMPzJQpU3LXXXflmWeeyZFHHpmxY8fmy1/+8mA8CgAAAFCh/piqWWotvXK8cu3HybqnOLJuxZriqNn9c10GPVhrbm7O4Ycfnv/8z//Ml770pa72xsbGXHzxxbniiivynve8J0lyySWX5I1vfGPuueeevP3tb89Pf/rTPPzww7n55pvT0NCQ3XbbLV/84hdz6qmn5owzzkhNTc1aP3PFihVZsWJF13lTU1P/PiQAAAAwKFYFda+2atH9VUZ7QERlBn0q6OzZs3PggQdmn3326dZ+3333ZeXKld3ad9ppp2y77ba5++67kyR33313dtlllzQ0vPIPw3777ZempqY89NBD6/zM+fPnp76+vus1derUPn4qAAAAAEa6QR2x9v3vfz/3339/7r333jWuLVu2LDU1NZk0aVK39oaGhixbtqyrz+qh2qrrq66ty7x58zJ37tyu86amJuEaAAAADIL+nqrZPK+52z1XjVRbfvLyFMea/snGGbRg7c9//nNOPPHELFq0KOPHjx/Qzx43blzGjRs3oJ8JAAAArKm/p2quK5Arji1aV42NNmhTQe+77748++yzectb3pLq6upUV1dn8eLF+frXv57q6uo0NDSktbU1L7zwQrf3LV++PFOmTEmSTJkyZY1dQledr+oDAAAAAP1h0Easvfe9782DDz7Yre2YY47JTjvtlFNPPTVTp07N2LFjc8stt+TQQw9Nkjz66KNZunRppk+fniSZPn16zj777Dz77LOZPHlykmTRokWpq6vLtGnTBvaBAAAAgF4zVZPhbNCCtU022SRvetOburUVi8VsvvnmXe0f+9jHMnfu3Gy22Wapq6vLpz71qUyfPj1vf/vbkyT77rtvpk2bliOOOCJf/epXs2zZspx22mmZPXu2qZ4AAAAwDAzkVM1iTdHun/SpQd28YEPOP//8VFVV5dBDD82KFSuy3377ZcGCBV3Xx4wZk+uvvz7HHXdcpk+fnmKxmKOOOipnnXXWIFYNAAAAwGhQKJfLoz6qbWpqSn19fRobG1NXVzfY5QAAAMCIV2otdW1c0DyvOcWa4lrbYKD1Jica0iPWAAAAgNHDVE2Gm0HbFRQAAAAAhjMj1gAAAIABUWotvXK8cu3Hybo3NIChRrAGAAAADIhV66e9WsO5Dd3OTQdl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+v793/99kuSxxx7LdtttlylTpuQXv/hFtz7Lly9PknWuy5Yk48aNy7hx4/rqEQAAAAAqsq6104pji9ZVGwaqBruAV+vo6Oi2/tnqHnjggSTJVlttlSSZPn16HnzwwTz77LNdfRYtWpS6urqu6aQAAAAA0B8GdcTavHnzcsABB2TbbbfNiy++mCuuuCK33XZbbrrppjz++OO54oor8v73vz+bb755fvOb32TOnDnZe++9s+uuuyZJ9t1330ybNi1HHHFEvvrVr2bZsmU57bTTMnv2bCPSAAAAAOhXgxqsPfvssznyyCPzzDPPpL6+PrvuumtuuummvO9978uf//zn3HzzzbngggtSKpUyderUHHrooTnttNO63j9mzJhcf/31Oe644zJ9+vQUi8UcddRROeusswbxqQAAAAB6r1hTtPvnMFMol8uj/nesqakp9fX1aWxsTF1d3WCXAwAAAMAg6U1ONOTWWAMAAACA4UCwBgAAAAAVEKwBAAAAQAUEawAAAABQAcEaAAAAAFRAsAYAAAAAFRCsAQAAAEAFBGsAAAAAUAHBGgAAAABUQLAGAAAAABUQrAEAAABABQRrAAAAMAqVWkspnFlI4cxCSq2lwS6H+D0ZjgRrAAAAAFABwRoAAAAAVKB6sAsAAAAABsbq0wtLK9d+nCTFmuKA1TTa+T0Z3grlcrk82EUMtqamptTX16exsTF1dXWDXQ4AAAD0i8KZhR71K58+6qOCAeP3ZOjpTU5kKigAAAAAVMBUUAAAABglmuc1dx2XVpbScG5DkmT5yctTHGuq4WDwezK8CdYAAABglFjXOl3FsUVreA0SvyfDm6mgAAAAAFABwRoAAAAAVMBUUAAAABiFijVFO00OMX5Phh8j1gAAAACgAoI1AAAAAKiAYA0AAAAAKiBYAwAAAHql1FpK4cxCCmcWUmotDXY5MGgEawAAAABQAcEaAAAAAFSgerALAAAAAIa+1ad8llau/ThJijXFAasJBptgDQAAANig2vm1a21vOLeh23n59PJAlANDgqmgAAAAAFABI9YAAACADWqe19x1XFpZ6hqptvzk5SmONf2T0UmwBgAAAGzQutZOK44tWleNUctUUAAAAACogGANAAAAACpgKigAAADQK8Wa4rDe/bPUWura5bR5XrOprFTMiDUAAAAAqIBgDQAAAAAqYCooAAAAMOKVWkuvHK9c+3Gy7t1PYW0EawAAAMCIt2pNtVdrOLeh2/lwXjuOgWcqKAAAAABUwIg1AAAAYMRrntfcdVxaWeoaqbb85OUpjjX9k8oI1gAAAIARb11rpxXHFq2rRsVMBQUAAACACgjWAAAAAKACpoICAAAAo0qxpmj3T/qEEWsAAAAAUAHBGgAAAABUQLAGAAAAABUQrAEAAABABQRrAAAAAFABwRoAAAAAVECwBgAAAAAVEKwBAAAAQAUEawAAAABQAcEaAAAAAFRAsAYAAAAAFRCsAQAAAEAFBGsAAAAwCpVaSymcWUjhzEJKraXBLgeGJcEaAAAAAFRAsAYAAAAAFage7AIAAACAgbH6lM/SyrUfJ0mxpjhgNcFwJlgDAACAUaJ2fu1a2xvObeh2Xj69PBDlwLBnKigAAAAAVMCINQAAABglmuc1dx2XVpa6RqotP3l5imNN/4TeEqwBAADAKLGutdOKY4vWVYMKmAoKAAAAABUQrAEAAABABUwFBQAAgFGoWFO0+ydsJCPWAAAAAKACgjUAAAAAqIBgDQAAAAAqIFgDAAAAgAoI1gAAAACgAoI1AAAAAKiAYA0AAAAAKiBYAwAAAIAKVPf2DU888UTuuOOOPPnkk3nppZey5ZZbZvfdd8/06dMzfvz4/qgRAAAAAIacHgdrl19+eS688ML88pe/TENDQ7beeutMmDAhzz//fB5//PGMHz8+hx9+eE499dS89rWv7c+aAQAAAGDQ9ShY23333VNTU5Ojjz46P/zhDzN16tRu11esWJG777473//+97PHHntkwYIFOeyww/qlYAAAAAAYCgrlcrm8oU433XRT9ttvvx7d8G9/+1v+9Kc/5a1vfetGFzdQmpqaUl9fn8bGxtTV1Q12OQAAAAAMkt7kRD0asdbTUC1JNt9882y++eY97g8AAAAAw1GvdwW9//778+CDD3ad//jHP87BBx+cz33uc2ltbe3T4gAAAABgqOp1sPbJT34yv//975Mkf/zjH/PhD384EydOzJVXXpl//dd/7fMCAQAAAGAo6nWw9vvf/z677bZbkuTKK6/M3nvvnSuuuCKXXnppfvjDH/Z1fQAAAAAwJPU6WCuXy+no6EiS3HzzzXn/+9+fJJk6dWr++te/9m11AAAAADBE9TpY22OPPfKlL30p3/ve97J48eIceOCBSZInnngiDQ0NfV4gAAAAAAxFvQ7WLrjggtx///054YQT8v/9f/9ftt9++yTJVVddlXe84x19XiAAAAAADEWFcrlc7osbvfzyyxkzZkzGjh3bF7cbUE1NTamvr09jY2Pq6uoGuxwAAAAABklvcqJej1hLkhdeeCHf/va3M2/evDz//PNJkocffjjPPvtsJbcDAAAAgGGnurdv+M1vfpP3vve9mTRpUv70pz/l4x//eDbbbLNcffXVWbp0ab773e/2R50AAAAAMKT0esTa3Llzc8wxx+QPf/hDxo8f39X+/ve/P7fffnufFgcAAAAAQ1Wvg7V77703n/zkJ9dof81rXpNly5b1SVEAAAAAMNT1OlgbN25cmpqa1mj//e9/ny233LJPigIAAACAoa7XwdpBBx2Us846KytXrkySFAqFLF26NKeeemoOPfTQPi8QAAAAAIaiXgdr//Zv/5bm5uZMnjw5LS0teec735ntt98+m2yySc4+++z+qBEAAAAAhpxe7wpaX1+fRYsWZcmSJfnNb36T5ubmvOUtb8k+++zTH/UBAAAAwJDU62BtlT333DN77LFHxo0bl0Kh0Jc1AQAAAMCQ1+upoB0dHfniF7+Y17zmNamtrc0TTzyRJPn85z+fiy++uM8LBAAAAIChqNfB2pe+9KVceuml+epXv5qampqu9je96U359re/3afFAQAAAMBQ1etg7bvf/W7+4z/+I4cffnjGjBnT1f7mN785v/vd7/q0OAAAAAAYqnodrD311FPZfvvt12jv6OjIypUr+6QoAAAAABjqeh2sTZs2LXfcccca7VdddVV23333PikKAAAAAIa6Xu8K+oUvfCFHHXVUnnrqqXR0dOTqq6/Oo48+mu9+97u5/vrr+6NGAAAAABhyej1ibebMmbnuuuty8803p1gs5gtf+EIeeeSRXHfddXnf+97XHzUCAAAAwJBTKJfL5cEuYrA1NTWlvr4+jY2NqaurG+xyAAAAABgkvcmJej1ibZVf/vKX+d73vpfvfe97ue+++yq6x8KFC7Prrrumrq4udXV1mT59en7yk590XX/55Zcze/bsbL755qmtrc2hhx6a5cuXd7vH0qVLc+CBB2bixImZPHlyTjnllLS1tVX6WAAAAADQI71eY+0vf/lL/umf/il33nlnJk2alCR54YUX8o53vCPf//73s8022/T4Xttss03OOeec7LDDDimXy/nOd76TmTNn5le/+lV23nnnzJkzJzfccEOuvPLK1NfX54QTTsisWbNy5513Jkna29tz4IEHZsqUKbnrrrvyzDPP5Mgjj8zYsWPz5S9/ubePBgAAAAA91uupoPvvv39eeOGFfOc738mOO+6YJHn00UdzzDHHpK6uLjfeeONGFbTZZpvla1/7Wj70oQ9lyy23zBVXXJEPfehDSZLf/e53eeMb35i77747b3/72/OTn/wkH/jAB/L000+noaEhSXLRRRfl1FNPzXPPPZeampoefaapoAAAAAAk/TwVdPHixVm4cGFXqJYkO+64Y77xjW/k9ttv7321/6u9vT3f//73UyqVMn369Nx3331ZuXJl9tlnn64+O+20U7bddtvcfffdSZK77747u+yyS1eoliT77bdfmpqa8tBDD63zs1asWJGmpqZuLwAAAADojV4Ha1OnTs3KlSvXaG9vb8/WW2/d6wIefPDB1NbWZty4cTn22GNzzTXXZNq0aVm2bFlqamq6ppuu0tDQkGXLliVJli1b1i1UW3V91bV1mT9/furr67teU6dO7XXdAAAAAIxuvQ7Wvva1r+VTn/pUfvnLX3a1/fKXv8yJJ56Yc889t9cF7LjjjnnggQfy85//PMcdd1yOOuqoPPzww72+T2/MmzcvjY2NXa8///nP/fp5AAAAAIw8vd684Oijj85LL72Uv//7v091defb29raUl1dnX/+53/OP//zP3f1ff755zd4v5qammy//fZJkre+9a259957c+GFF+Yf//Ef09ramhdeeKHbqLXly5dnypQpSZIpU6bkF7/4Rbf7rdo1dFWftRk3blzGjRvXswcGAAAAgLXodbB2wQUX9EMZr+jo6MiKFSvy1re+NWPHjs0tt9ySQw89NEnnJglLly7N9OnTkyTTp0/P2WefnWeffTaTJ09OkixatCh1dXWZNm1av9YJAAAAwOjW62DtqKOO6rMPnzdvXg444IBsu+22efHFF3PFFVfktttuy0033ZT6+vp87GMfy9y5c7PZZpulrq4un/rUpzJ9+vS8/e1vT5Lsu+++mTZtWo444oh89atfzbJly3Laaadl9uzZRqQBAAAA0K96HawtXbp0vde33XbbHt/r2WefzZFHHplnnnkm9fX12XXXXXPTTTflfe97X5Lk/PPPT1VVVQ499NCsWLEi++23XxYsWND1/jFjxuT666/Pcccdl+nTp6dYLOaoo47KWWed1dvHAgAAAIBeKZTL5XJv3lBVVZVCobDO6+3t7Rtd1EBrampKfX19GhsbU1dXN9jlAAAAADBIepMT9XrE2q9+9atu5ytXrsyvfvWrnHfeeTn77LN7ezsAAAAAGJZ6Hay9+c1vXqNtjz32yNZbb52vfe1rmTVrVp8UBgAAAABDWVVf3WjHHXfMvffe21e3AwAAAIAhrdcj1pqamrqdl8vlPPPMMznjjDOyww479FlhAAAAADCU9TpYmzRp0hqbF5TL5UydOjX/9V//1WeFAQAAAMBQ1utg7dZbb+12XlVVlS233DLbb799qqt7fTsAAAAAGJZ6nYS9853vXGv7M888k7PPPjv//u//vtFFAQAAAMBQ16tg7aGHHsqtt96ampqa/MM//EMmTZqUv/71rzn77LNz0UUX5Q1veEN/1QkAAAAAQ0qPdwW99tprs/vuu+fTn/50jj322Oyxxx659dZb88Y3vjGPPPJIrrnmmjz00EP9WSsAAAAADBk9Dta+9KUvZfbs2Wlqasp5552XP/7xj/n0pz+d//mf/8mNN96Y/fffvz/rBAAAAIAhpVAul8s96VhfX5/77rsv22+/fdrb2zNu3LjceOON2Wefffq7xn7X1NSU+vr6NDY2pq6ubrDLAQAAAGCQ9CYn6vGItRdffLHrZmPGjMmECROsqQYAAADAqNWrzQtuuumm1NfXJ0k6Ojpyyy235Le//W23PgcddFDfVQcAAAAAQ1SPp4JWVW14cFuhUEh7e/tGFzXQTAUFAAAAIOldTtTjEWsdHR0bXRgAAAAAjBQ9XmMNAAAAAHiFYA0A6FctLcny5Z0/AQBgJBGsAQD9YsmSZNaspLY2mTKl8+esWcmddw52ZQAA0DcEawBAn1u4MNl77+S665JVy7R2dHSe77VXctFFg1sfAAD0BcEaANCnlixJZs9OyuWkra37tba2zvbjjzdyDQCA4a/Hu4K+Wmtra5599tk1dgvddtttN7ooAGD4Ou+8ZMyYNUO11Y0Zk5x/fjJjxsDVBQAAfa3Xwdof/vCH/PM//3Puuuuubu3lcjmFQiHt7e19VhwAMLy0tCQ//vEr0z/Xpa0tueaazv4TJgxMbQAA0Nd6HawdffTRqa6uzvXXX5+tttoqhUKhP+oCAIahpqYNh2qrdHR09hesAQAwXPU6WHvggQdy3333ZaedduqPegCAYayuLqmq6lm4VlXV2R8AAIarXm9eMG3atPz1r3/tj1oAgGFuwoRk5sykegN/dVddnRxyiNFqAAAMb70O1r7yla/kX//1X3Pbbbflb3/7W5qamrq9AIDRbe7cZENLrra3J3PmDEw9AADQXwrlcrncmzdUVXVmca9eW204b17Q1NSU+vr6NDY2ps6cFADYaBddlBx//Jq7g1ZXd4ZqCxYkxx47ePUBAMC69CYn6vUaa7feemvFhQEAo8Oxxya77JKcf37n7p8dHZ1rqs2c2TlSbcaMwa4QAAA2Xq9HrI1ERqwBQP9paenc/bOuzppqAAAMff06Ym2Vl156KUuXLk1ra2u39l133bXSWwIAI9CECQI1AABGpl4Ha88991yOOeaY/OQnP1nr9eG4xhoAAAAA9FavdwU96aST8sILL+TnP/95JkyYkBtvvDHf+c53ssMOO+Taa6/tjxoBAAAAYMjp9Yi1n/3sZ/nxj3+cPfbYI1VVVXnta1+b973vfamrq8v8+fNz4IEH9kedAAAAADCk9HrEWqlUyuTJk5Mkm266aZ577rkkyS677JL777+/b6sDAAAAgCGq18HajjvumEcffTRJ8uY3vznf+ta38tRTT+Wiiy7KVltt1ecFAgAAAMBQ1OupoCeeeGKeeeaZJMnpp5+e/fffP5dffnlqampy6aWX9nV9AAAAADAkFcrlcnljbvDSSy/ld7/7XbbddttsscUWfVXXgGpqakp9fX0aGxtTV1c32OUAAAAAMEh6kxP1esTaq02cODFvectbNvY2AAAAADCs9ChYmzt3br74xS+mWCxm7ty56+173nnn9UlhAAAAADCU9ShY+9WvfpWVK1d2Ha9LoVDom6oAAAAAYIjb6DXWRgJrrAEAAACQ9C4nqhqgmgAAAABgROnRVNBZs2b1+IZXX311xcUAAAAAwHDRoxFr9fX1Xa+6urrccsst+eUvf9l1/b777sstt9yS+vr6fisUAAAAAIaSHo1Yu+SSS7qOTz311PzDP/xDLrrooowZMyZJ0t7enuOPP976ZAAAAACMGr3evGDLLbfMkiVLsuOOO3Zrf/TRR/OOd7wjf/vb3/q0wIFg8wIAAAAAkn7evKCtrS2/+93v1mj/3e9+l46Ojt7eDgAY4VpakuXLO38CAMBI0qOpoKs75phj8rGPfSyPP/54/u7v/i5J8vOf/zznnHNOjjnmmD4vEAAYnpYsSc47L/nxj5OOjqSqKpk5M/nMZ5IZMwa7OgAA2Hi9ngra0dGRc889NxdeeGGeeeaZJMlWW22VE088MZ/5zGe61l0bTkwFBYC+tXBhMnt2MmZM0tb2Snt1ddLenixYkBx77ODVBwAA69KbnKjXwdqrPyjJsA+jBGsA0HeWLEn23jtZ339hFArJHXcYuQYAwNDTr2usra6urk4QBQB0c955nSPV1mfMmOT88wemHgAA6C+9DtaWL1+eI444IltvvXWqq6szZsyYbi8AYPRqaelcU2316Z9r09aWXHONDQ0AABjeer15wdFHH52lS5fm85//fLbaaqsUCoX+qAsAGIaamjo3KuiJjo7O/hMm9G9NAADQX3odrC1ZsiR33HFHdtttt34oBwAYzurqOnf/7Em4VlXV2R8AAIarXk8FnTp1ajZivwMAYASbMCGZObNz98/1qa5ODjnEaDUAAIa3XgdrF1xwQT772c/mT3/6Uz+UAwAMd3PnJu3t6+/T3p7MmTMw9QAAQH/p9VTQf/zHf8xLL72U7bbbLhMnTszYsWO7XX/++ef7rDgAYPjZc89kwYLk+OM7d/9cfSOD6urOUG3BgmTGjMGrEQAA+kKvg7ULLrigH8oAAEaSY49NdtklOf/8zt0/Ozo611SbObNzpJpQDQCAkaBQtmBampqaUl9fn8bGxtRZRRkA+lRLS+fun3V11lQDAGDo601O1OMRa01NTT3qJ5gCAFY3YYJADQCAkanHwdqkSZNSKBTWeb1cLqdQKKR9Q6sVAwAAAMAI0ONg7dZbb+3POgAAAABgWOlxsPbOd76zP+sAAAAAgGGlarALAAAAAIDhSLAGAAOs1FpK4cxCCmcWUmotDXY5AABAhQRrAAAAAFABwRoAAAAAVKDHmxcAAJVbfcpnaeXaj5OkWFMcsJoAAICN0+tgrVQq5Zxzzsktt9ySZ599Nh0dHd2u//GPf+yz4gBgpKidX7vW9oZzG7qdl08vD0Q5AABAH+h1sPYv//IvWbx4cY444ohstdVWKRQK/VEXAAAAAAxpvQ7WfvKTn+SGG27IjBkz+qMeABiRmuc1dx2XVpa6RqotP3l5imNN/wQAgOGo18Happtums0226w/agGAEWtda6cVxxatqwYAAMNUr3cF/eIXv5gvfOELeemll/qjHgAAAAAYFno0Ym333XfvtpbaY489loaGhrzuda/L2LFju/W9//77+7ZCAAAAABiCehSsHXzwwf1cBgCMHsWaot0/AQBgBCiUy+U++y/7crk8LHcJbWpqSn19fRobG1NXVzfY5QAAAAAwSHqTE/V6jbWvfe1ra21vb2/PRz7ykd7eDgAAAACGpYqCtYsvvrhbW3t7ez784Q/ngQce6Ku6AAD6VEtLsnx5508AAOgLvQ7Wbrjhhpx88sm56qqrkiRtbW057LDD8tBDD+XWW2/t8wIBYKQptZZSOLOQwpmFlFpLg13OiLdkSTJrVlJbm0yZ0vlz1qzkzjsHuzIAAIa7Hm1esLq3ve1t+eEPf5iDDz44NTU1ufjii/PYY4/l1ltvTUNDQ3/UCABQkYULk9mzkzFjko6OzraOjuS665If/ShZsCA59thBLREAgGGs1yPWkuQ973lPvvvd7+bQQw/NE088kcWLFwvVAIAhZcmSzlCtXE7a2rpfa2vrbD/+eCPXAACoXI9GrM2aNWut7VtuuWUmTZqUT3ziE11tV199dd9UBgAjyOpTPksr136cJMWa4oDVNNKdd17nSLVXh2qrGzMmOf/8ZMaMgasLAICRo0fBWn19/Vrb99tvvz4tBgBGqtr5tWttbzi3+4jv8unlgShnxGtpSX7841emf65LW1tyzTWd/SdM6LvPL7WWun7Pm+c1C0wBAEaoHgVrl1xySX/XAQDQZ5qaNhyqrdLR0dm/L4M1AABGh15vXgAA9F7zvOau49LKUtdIteUnL09xrNFMfa2uLqmq6lm4VlXV2R8AAHqromDtqquuyn//939n6dKlaW1t7Xbt/vvv75PCAGAkWddUwOLYommC/WDChGTmzM7dP9e3xlp1dWe/vhitZh09AIDRp9e7gn7961/PMccck4aGhvzqV7/K3/3d32XzzTfPH//4xxxwwAH9USMAQK/NnZu0t6+/T3t7MmdO33xe7fzartfqa+c1nNvQ7RoAACNHr4O1BQsW5D/+4z/yjW98IzU1NfnXf/3XLFq0KJ/+9KfT2NjYHzUCAPTannsmCxYkhULnyLTVVVd3ti9YYEdQAAAqVyiXy73afmzixIl55JFH8trXvjaTJ0/OokWL8uY3vzl/+MMf8va3vz1/+9vf+qvWftPU1JT6+vo0NjamziIrADCi3Hlncv75nbt/dnR0rql2yCGdI9X6MlR79VTQda2jZyooAMDQ1pucqNdrrE2ZMiXPP/98Xvva12bbbbfNPffckze/+c154okn0suMDgCg382Y0flqaenc/bOurn92ALWOHgDA6NPrqaDvec97cu211yZJjjnmmMyZMyfve9/78o//+I855JBD+rxAAIC+MGFC0tDQP6EaAACjU69HrP3Hf/xHOv537/rZs2dn8803z1133ZWDDjooxx57bJ8XCAAAAABDUa/XWFuXF154If/zP/+Tj3zkI31xuwFljTUAAAAAkt7lRL2eCrouTz75ZI444oi+uh0AAAAADGl9FqwBAAAAwGgiWAMAAACACgjWAAAAAKACPd4V9Otf//p6rz/11FMbXQwAAAAADBc9DtbOP//8DfbZdtttN6oYAAAAABguehysPfHEE/1ZBwAAAAAMK9ZYAwAAAIAK9ChY+/73v9/jG/75z3/OnXfeWXFBAAAAADAc9ChYW7hwYd74xjfmq1/9ah555JE1rjc2NuZ//ud/8pGPfCRvectb8re//a3PCwUAAACAoaRHa6wtXrw41157bb7xjW9k3rx5KRaLaWhoyPjx4/P//t//y7Jly7LFFlvk6KOPzm9/+9s0NDT0d90AMGyVWkupnV+bJGme15xiTXGQKwIAACrR480LDjrooBx00EH561//miVLluTJJ59MS0tLtthii+y+++7ZfffdU1VlyTYAAAAARoceB2urbLHFFjn44IP7oRQAAAAAGD56HawBAL1Xai29crxy7cdJTAsdIUz3BQAYHQZ17ub8+fPztre9LZtsskkmT56cgw8+OI8++mi3Pu9617tSKBS6vY499thufZYuXZoDDzwwEydOzOTJk3PKKaekra1tIB8FANardn5t16vh3FfWIm04t6HbNQAAYPgY1BFrixcvzuzZs/O2t70tbW1t+dznPpd99903Dz/8cIrFV/5m9+Mf/3jOOuusrvOJEyd2Hbe3t+fAAw/MlClTctddd+WZZ57JkUcembFjx+bLX/7ygD4PAAAAAKPHoAZrN954Y7fzSy+9NJMnT859992Xvffeu6t94sSJmTJlylrv8dOf/jQPP/xwbr755jQ0NGS33XbLF7/4xZx66qk544wzUlNT06/PAAA90Tyvueu4tLLUNWpt+cnLUxxrmuBIYLovAMDoU3Gw1tramieeeCLbbbddqqv7Jp9rbGxMkmy22Wbd2i+//PJcdtllmTJlSj74wQ/m85//fNeotbvvvju77LJLGhpemVaz33775bjjjstDDz2U3XfffY3PWbFiRVasWNF13tTU1Cf1A8C6rCtMKY4tClpGiHVN5V196m+SlE8vD0Q5AAAMgF6vsfbSSy/lYx/7WCZOnJidd945S5cuTZJ86lOfyjnnnFNxIR0dHTnppJMyY8aMvOlNb+pq/8hHPpLLLrsst956a+bNm5fvfe97+ehHP9p1fdmyZd1CtSRd58uWLVvrZ82fPz/19fVdr6lTp1ZcNwAAAACjU6+Hms2bNy+//vWvc9ttt2X//ffvat9nn31yxhln5LOf/WxFhcyePTu//e1vs2TJkm7tn/jEJ7qOd9lll2y11VZ573vfm8cffzzbbbddRZ81b968zJ07t+u8qalJuAYAbBTTfQEARp9eB2s/+tGP8oMf/CBvf/vbUygUutp33nnnPP744xUVccIJJ+T666/P7bffnm222Wa9ff/+7/8+SfLYY49lu+22y5QpU/KLX/yiW5/ly5cnyTrXZRs3blzGjRtXUa0AsLGKNUXTAUcg030BAEafXk8Ffe655zJ58uQ12kulUregrSfK5XJOOOGEXHPNNfnZz36W17/+9Rt8zwMPPJAk2WqrrZIk06dPz4MPPphnn322q8+iRYtSV1eXadOm9aoeAAAAAOipXgdre+yxR2644Yau81Vh2re//e1Mnz69V/eaPXt2LrvsslxxxRXZZJNNsmzZsixbtiwtLS1Jkscffzxf/OIXc9999+VPf/pTrr322hx55JHZe++9s+uuuyZJ9t1330ybNi1HHHFEfv3rX+emm27KaaedltmzZxuVBgAAAEC/KZTL5V7NRVmyZEkOOOCAfPSjH82ll16aT37yk3n44Ydz1113ZfHixXnrW9/a8w9fxwi3Sy65JEcffXT+/Oc/56Mf/Wh++9vfplQqZerUqTnkkENy2mmnpa6urqv/k08+meOOOy633XZbisVijjrqqJxzzjk93q20qakp9fX1aWxs7HZfAAAAAEaX3uREvQ7Wks6RZOecc05+/etfp7m5OW95y1ty6qmnZpdddqm46MEkWAMAAAAgGYBgbaQRrAEwkEqtpdTOr03SuZOkhe0BAGDo6E1O1Os11v7n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r8zixYvz9NNPZ9asWV3X29vbc+CBB6a1tTV33XVXvvOd7+TSSy/NF77whcF4pFFnyZJk9uykXE5enWW2tXW2H3+8kWsAAADAyFMol8vlwS5ileeeey6TJ0/O4sWLs/fee6exsTFbbrllrrjiinzoQx9Kkvzud7/LG9/4xtx99915+9vfnp/85Cf5wAc+kKeffjoNDQ1JkosuuiinnnpqnnvuudTU1Gzwc5uamlJfX5/GxsbU1dX16zOONLNmdY5MW98AwerqZObM5KqrBq4uADbe6tM0SytLaTi389+zy09enuLYYte1Yk1xjff2570AAKA/9SYnqh6gmnqksbExSbLZZpslSe67776sXLky++yzT1efnXbaKdtuu21XsHb33Xdnl1126QrVkmS//fbLcccdl4ceeii77777Gp+zYsWKrFixouu8qampvx5pRGtpSX7841emf65LW1tyzTWd/SdMGJjaANh4tfNr19q+KhRbpXz6hv+Ori/vBQAAQ8WQ2bygo6MjJ510UmbMmJE3velNSZJly5alpqYmkyZN6ta3oaEhy5Yt6+qzeqi26vqqa2szf/781NfXd72mTp3ax08zOjQ1bThUW6Wjo7M/AAAAwEgxZEaszZ49O7/97W+zZMmSfv+sefPmZe7cuV3nTU1NwrUK1NUlVVU9C9eqqjr7AzB8NM9r7jpe3/TNgb4XAAAMFUMiWDvhhBNy/fXX5/bbb88222zT1T5lypS0trbmhRde6DZqbfny5ZkyZUpXn1/84hfd7rdq19BVfV5t3LhxGTduXB8/xegzYULn2mk9XWPNNFCA4WVd650VxxZ7vRZaX94LAACGikGdCloul3PCCSfkmmuuyc9+9rO8/vWv73b9rW99a8aOHZtbbrmlq+3RRx/N0qVLM3369CTJ9OnT8+CDD+bZZ5/t6rNo0aLU1dVl2rRpA/Mgo9jcuUl7+/r7tLcnc+YMTD0AAAAAA2VQg7XZs2fnsssuyxVXXJFNNtkky5Yty7Jly9LS0pIkqa+vz8c+9rHMnTs3t956a+67774cc8wxmT59et7+9rcnSfbdd99MmzYtRxxxRH7961/npptuymmnnZbZs2cblTYA9twzWbAgKRQ6R6atrrq6s33BgmTGjMGpDwAAAKC/FMrl8qBtv1UoFNbafskll+Too49Okrz88sv5zGc+k//6r//K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F98t+ovvFv3Fd4v+4rtFf+mv71a5XM6LL76YrbfeOlVV619FzYi1JFVVVdlmm20Gu4wRpa6uzh+Y9AvfLfqL7xb9xXeL/uK7RX/x3aK/+G7RX/rju7WhkWqr2LwAAAAAACogWAMAAACACgjW6FPjxo3L6aefnnHjxg12KYwwvlv0F98t+ovvFv3Fd4v+4rtFf/Hdor8Mhe+WzQsAAAAAoAJGrAEAAABABQRrAAAAAFABwRoAAAAAVECwBgAAAAAVEKyxhttvvz0f/OAHs/XWW6dQKORHP/pR17WVK1fm1FNPzS677JJisZitt946Rx55ZJ5++ulu93j++edz+OGHp66uLpMmTcrHPvaxNDc3d+vzm9/8JnvttVfGjx+fqVOn5qtf/epAPB6DaH3frVc79thjUygUcsEFF3Rr991ibXry3XrkkUdy0EEHpb6+PsViMW9729uydOnSrusvv/xyZs+enc033zy1tbU59NBDs3z58m73WLp0aQ488MBMnDgxkydPzimnnJK2trb+fjwG0Ya+W83NzTnhhBOyzTbbZMKECZk2bVouuuiibn18t1ib+fPn521ve1s22WSTTJ48OQcffHAeffTRbn366rtz22235S1veUvGjRuX7bffPpdeeml/Px6DaEPfreeffz6f+tSnsuOOO2bChAnZdttt8+lPfzqNjY3d7uO7xav15M+tVcrlcg444IC1/rvTd4tX6+l36+6778573vOeFIvF1NXVZe+9905LS0vX9cH6f0XBGmsolUp585vfnG9+85trXHvppZdy//335/Of/3zuv//+XH311Xn00Udz0EEHdet3+OGH56GHHsqiRYty/fXX5/bbb88nPvGJrutNTU3Zd99989rXvjb33Xdfvva1r+WMM87If/zHf/T78zF41vfdWt0111yTe+65J1tvvfUa13y3WJsNfbcef/zx7Lnnntlpp51y22235Te/+U0+//nPZ/z48V195syZk+uuuy5XXnllFi9enKeffjqzZs3qut7e3p4DDzwwra2tueuuu/Kd73wnl156ab7whS/0+/MxeDb03Zo7d25uvPHGXHbZZXnkkUdy0kkn5YQTTsi1117b1cd3i7VZvHhxZs+enXvuuSeLFi3KypUrs++++6ZUKnX16YvvzhNPPJEDDzww7373u/PAAw/kpJNOyr/8y7/kpptuGtDn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",
      "text/plain": [
       "<Figure size 1500x1000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "def plot_scatter_chart(df,location):\n",
    "    bhk2 = df[(df.location==location) & (df.bhk==2)]\n",
    "    bhk3 = df[(df.location==location) & (df.bhk==3)]\n",
    "    matplotlib.rcParams['figure.figsize'] = (15,10)\n",
    "    plt.scatter(bhk2.total_sqft,bhk2.price,color='blue',label='2 BHK', s=50)\n",
    "    plt.scatter(bhk3.total_sqft,bhk3.price,marker='+', color='green',label='3 BHK', s=50)\n",
    "    plt.xlabel(\"Total Square Feet Area\")\n",
    "    plt.ylabel(\"Price (Lakh Indian Rupees)\")\n",
    "    plt.title(location)\n",
    "    plt.legend()\n",
    "    \n",
    "plot_scatter_chart(df7,\"Rajaji Nagar\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "d83240c5-b352-4fe6-a7a7-79d88dab2dfb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(7317, 7)"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def remove_bhk_outliers(df):\n",
    "    exclude_indices = np.array([])\n",
    "    for location, location_df in df.groupby('location'):\n",
    "        bhk_stats = {}\n",
    "        for bhk, bhk_df in location_df.groupby('bhk'):\n",
    "            bhk_stats[bhk] = {\n",
    "                'mean': np.mean(bhk_df.price_per_sqft),\n",
    "                'std': np.std(bhk_df.price_per_sqft),\n",
    "                'count': bhk_df.shape[0]\n",
    "            }\n",
    "        for bhk, bhk_df in location_df.groupby('bhk'):\n",
    "            stats = bhk_stats.get(bhk-1)\n",
    "            if stats and stats['count']>5:\n",
    "                exclude_indices = np.append(exclude_indices, bhk_df[bhk_df.price_per_sqft<(stats['mean'])].index.values)\n",
    "    return df.drop(exclude_indices,axis='index')\n",
    "df8 = remove_bhk_outliers(df7)\n",
    "\n",
    "df8.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "6b5d9b44-dcee-4310-990d-527b0e87ad2b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(7239, 7)"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df9 = df8[df8.bath<df8.bhk+2]\n",
    "df9.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "42940d50-052a-4139-a5d2-ff11c69831bc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>1st Block Jayanagar</th>\n",
       "      <th>1st Phase JP Nagar</th>\n",
       "      <th>2nd Phase Judicial Layout</th>\n",
       "      <th>2nd Stage Nagarbhavi</th>\n",
       "      <th>5th Block Hbr Layout</th>\n",
       "      <th>5th Phase JP Nagar</th>\n",
       "      <th>6th Phase JP Nagar</th>\n",
       "      <th>7th Phase JP Nagar</th>\n",
       "      <th>8th Phase JP Nagar</th>\n",
       "      <th>9th Phase JP Nagar</th>\n",
       "      <th>...</th>\n",
       "      <th>Vishveshwarya Layout</th>\n",
       "      <th>Vishwapriya Layout</th>\n",
       "      <th>Vittasandra</th>\n",
       "      <th>Whitefield</th>\n",
       "      <th>Yelachenahalli</th>\n",
       "      <th>Yelahanka</th>\n",
       "      <th>Yelahanka New Town</th>\n",
       "      <th>Yelenahalli</th>\n",
       "      <th>Yeshwanthpur</th>\n",
       "      <th>other</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3 rows × 241 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   1st Block Jayanagar  1st Phase JP Nagar  2nd Phase Judicial Layout  \\\n",
       "0                 True               False                      False   \n",
       "1                 True               False                      False   \n",
       "2                 True               False                      False   \n",
       "\n",
       "   2nd Stage Nagarbhavi  5th Block Hbr Layout  5th Phase JP Nagar  \\\n",
       "0                 False                 False               False   \n",
       "1                 False                 False               False   \n",
       "2                 False                 False               False   \n",
       "\n",
       "   6th Phase JP Nagar  7th Phase JP Nagar  8th Phase JP Nagar  \\\n",
       "0               False               False               False   \n",
       "1               False               False               False   \n",
       "2               False               False               False   \n",
       "\n",
       "   9th Phase JP Nagar  ...  Vishveshwarya Layout  Vishwapriya Layout  \\\n",
       "0               False  ...                 False               False   \n",
       "1               False  ...                 False               False   \n",
       "2               False  ...                 False               False   \n",
       "\n",
       "   Vittasandra  Whitefield  Yelachenahalli  Yelahanka  Yelahanka New Town  \\\n",
       "0        False       False           False      False               False   \n",
       "1        False       False           False      False               False   \n",
       "2        False       False           False      False               False   \n",
       "\n",
       "   Yelenahalli  Yeshwanthpur  other  \n",
       "0        False         False  False  \n",
       "1        False         False  False  \n",
       "2        False         False  False  \n",
       "\n",
       "[3 rows x 241 columns]"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df10 = df9.drop(['size','price_per_sqft'],axis='columns')\n",
    "df10.head(3)\n",
    "dummies = pd.get_dummies(df10.location)\n",
    "dummies.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "58f7c44b-1dcf-4c80-b32c-8fae5739f70d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>location</th>\n",
       "      <th>total_sqft</th>\n",
       "      <th>bath</th>\n",
       "      <th>price</th>\n",
       "      <th>bhk</th>\n",
       "      <th>1st Block Jayanagar</th>\n",
       "      <th>1st Phase JP Nagar</th>\n",
       "      <th>2nd Phase Judicial Layout</th>\n",
       "      <th>2nd Stage Nagarbhavi</th>\n",
       "      <th>5th Block Hbr Layout</th>\n",
       "      <th>...</th>\n",
       "      <th>Vijayanagar</th>\n",
       "      <th>Vishveshwarya Layout</th>\n",
       "      <th>Vishwapriya Layout</th>\n",
       "      <th>Vittasandra</th>\n",
       "      <th>Whitefield</th>\n",
       "      <th>Yelachenahalli</th>\n",
       "      <th>Yelahanka</th>\n",
       "      <th>Yelahanka New Town</th>\n",
       "      <th>Yelenahalli</th>\n",
       "      <th>Yeshwanthpur</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1st Block Jayanagar</td>\n",
       "      <td>2850.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>428.0</td>\n",
       "      <td>4</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1st Block Jayanagar</td>\n",
       "      <td>1630.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>194.0</td>\n",
       "      <td>3</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1st Block Jayanagar</td>\n",
       "      <td>1875.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>235.0</td>\n",
       "      <td>3</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1st Block Jayanagar</td>\n",
       "      <td>1200.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>130.0</td>\n",
       "      <td>3</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1st Block Jayanagar</td>\n",
       "      <td>1235.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>148.0</td>\n",
       "      <td>2</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 245 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              location  total_sqft  bath  price  bhk  1st Block Jayanagar  \\\n",
       "0  1st Block Jayanagar      2850.0   4.0  428.0    4                 True   \n",
       "1  1st Block Jayanagar      1630.0   3.0  194.0    3                 True   \n",
       "2  1st Block Jayanagar      1875.0   2.0  235.0    3                 True   \n",
       "3  1st Block Jayanagar      1200.0   2.0  130.0    3                 True   \n",
       "4  1st Block Jayanagar      1235.0   2.0  148.0    2                 True   \n",
       "\n",
       "   1st Phase JP Nagar  2nd Phase Judicial Layout  2nd Stage Nagarbhavi  \\\n",
       "0               False                      False                 False   \n",
       "1               False                      False                 False   \n",
       "2               False                      False                 False   \n",
       "3               False                      False                 False   \n",
       "4               False                      False                 False   \n",
       "\n",
       "   5th Block Hbr Layout  ...  Vijayanagar  Vishveshwarya Layout  \\\n",
       "0                 False  ...        False                 False   \n",
       "1                 False  ...        False                 False   \n",
       "2                 False  ...        False                 False   \n",
       "3                 False  ...        False                 False   \n",
       "4                 False  ...        False                 False   \n",
       "\n",
       "   Vishwapriya Layout  Vittasandra  Whitefield  Yelachenahalli  Yelahanka  \\\n",
       "0               False        False       False           False      False   \n",
       "1               False        False       False           False      False   \n",
       "2               False        False       False           False      False   \n",
       "3               False        False       False           False      False   \n",
       "4               False        False       False           False      False   \n",
       "\n",
       "   Yelahanka New Town  Yelenahalli  Yeshwanthpur  \n",
       "0               False        False         False  \n",
       "1               False        False         False  \n",
       "2               False        False         False  \n",
       "3               False        False         False  \n",
       "4               False        False         False  \n",
       "\n",
       "[5 rows x 245 columns]"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df11 = pd.concat([df10,dummies.drop('other',axis='columns')],axis='columns')\n",
    "df11.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "083fb69d-b9f5-4895-a187-38d6a791ff6f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>total_sqft</th>\n",
       "      <th>bath</th>\n",
       "      <th>price</th>\n",
       "      <th>bhk</th>\n",
       "      <th>1st Block Jayanagar</th>\n",
       "      <th>1st Phase JP Nagar</th>\n",
       "      <th>2nd Phase Judicial Layout</th>\n",
       "      <th>2nd Stage Nagarbhavi</th>\n",
       "      <th>5th Block Hbr Layout</th>\n",
       "      <th>5th Phase JP Nagar</th>\n",
       "      <th>...</th>\n",
       "      <th>Vijayanagar</th>\n",
       "      <th>Vishveshwarya Layout</th>\n",
       "      <th>Vishwapriya Layout</th>\n",
       "      <th>Vittasandra</th>\n",
       "      <th>Whitefield</th>\n",
       "      <th>Yelachenahalli</th>\n",
       "      <th>Yelahanka</th>\n",
       "      <th>Yelahanka New Town</th>\n",
       "      <th>Yelenahalli</th>\n",
       "      <th>Yeshwanthpur</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2850.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>428.0</td>\n",
       "      <td>4</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1630.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>194.0</td>\n",
       "      <td>3</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2 rows × 244 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   total_sqft  bath  price  bhk  1st Block Jayanagar  1st Phase JP Nagar  \\\n",
       "0      2850.0   4.0  428.0    4                 True               False   \n",
       "1      1630.0   3.0  194.0    3                 True               False   \n",
       "\n",
       "   2nd Phase Judicial Layout  2nd Stage Nagarbhavi  5th Block Hbr Layout  \\\n",
       "0                      False                 False                 False   \n",
       "1                      False                 False                 False   \n",
       "\n",
       "   5th Phase JP Nagar  ...  Vijayanagar  Vishveshwarya Layout  \\\n",
       "0               False  ...        False                 False   \n",
       "1               False  ...        False                 False   \n",
       "\n",
       "   Vishwapriya Layout  Vittasandra  Whitefield  Yelachenahalli  Yelahanka  \\\n",
       "0               False        False       False           False      False   \n",
       "1               False        False       False           False      False   \n",
       "\n",
       "   Yelahanka New Town  Yelenahalli  Yeshwanthpur  \n",
       "0               False        False         False  \n",
       "1               False        False         False  \n",
       "\n",
       "[2 rows x 244 columns]"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df12 = df11.drop('location',axis='columns')\n",
    "df12.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "68f1ee00-f93f-4d1f-87e2-e304cc29bf90",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = df12.drop('price', axis = 'columns')\n",
    "y = df12.price"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "354f8399-3235-4f26-8c08-4ab5f1b1e765",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>total_sqft</th>\n",
       "      <th>bath</th>\n",
       "      <th>bhk</th>\n",
       "      <th>1st Block Jayanagar</th>\n",
       "      <th>1st Phase JP Nagar</th>\n",
       "      <th>2nd Phase Judicial Layout</th>\n",
       "      <th>2nd Stage Nagarbhavi</th>\n",
       "      <th>5th Block Hbr Layout</th>\n",
       "      <th>5th Phase JP Nagar</th>\n",
       "      <th>6th Phase JP Nagar</th>\n",
       "      <th>...</th>\n",
       "      <th>Vijayanagar</th>\n",
       "      <th>Vishveshwarya Layout</th>\n",
       "      <th>Vishwapriya Layout</th>\n",
       "      <th>Vittasandra</th>\n",
       "      <th>Whitefield</th>\n",
       "      <th>Yelachenahalli</th>\n",
       "      <th>Yelahanka</th>\n",
       "      <th>Yelahanka New Town</th>\n",
       "      <th>Yelenahalli</th>\n",
       "      <th>Yeshwanthpur</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2850.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1630.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1875.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1200.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1235.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10233</th>\n",
       "      <td>1200.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10234</th>\n",
       "      <td>1800.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10237</th>\n",
       "      <td>1353.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10238</th>\n",
       "      <td>812.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10241</th>\n",
       "      <td>3600.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>4</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>7239 rows × 243 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       total_sqft  bath  bhk  1st Block Jayanagar  1st Phase JP Nagar  \\\n",
       "0          2850.0   4.0    4                 True               False   \n",
       "1          1630.0   3.0    3                 True               False   \n",
       "2          1875.0   2.0    3                 True               False   \n",
       "3          1200.0   2.0    3                 True               False   \n",
       "4          1235.0   2.0    2                 True               False   \n",
       "...           ...   ...  ...                  ...                 ...   \n",
       "10233      1200.0   2.0    2                False               False   \n",
       "10234      1800.0   1.0    1                False               False   \n",
       "10237      1353.0   2.0    2                False               False   \n",
       "10238       812.0   1.0    1                False               False   \n",
       "10241      3600.0   5.0    4                False               False   \n",
       "\n",
       "       2nd Phase Judicial Layout  2nd Stage Nagarbhavi  5th Block Hbr Layout  \\\n",
       "0                          False                 False                 False   \n",
       "1                          False                 False                 False   \n",
       "2                          False                 False                 False   \n",
       "3                          False                 False                 False   \n",
       "4                          False                 False                 False   \n",
       "...                          ...                   ...                   ...   \n",
       "10233                      False                 False                 False   \n",
       "10234                      False                 False                 False   \n",
       "10237                      False                 False                 False   \n",
       "10238                      False                 False                 False   \n",
       "10241                      False                 False                 False   \n",
       "\n",
       "       5th Phase JP Nagar  6th Phase JP Nagar  ...  Vijayanagar  \\\n",
       "0                   False               False  ...        False   \n",
       "1                   False               False  ...        False   \n",
       "2                   False               False  ...        False   \n",
       "3                   False               False  ...        False   \n",
       "4                   False               False  ...        False   \n",
       "...                   ...                 ...  ...          ...   \n",
       "10233               False               False  ...        False   \n",
       "10234               False               False  ...        False   \n",
       "10237               False               False  ...        False   \n",
       "10238               False               False  ...        False   \n",
       "10241               False               False  ...        False   \n",
       "\n",
       "       Vishveshwarya Layout  Vishwapriya Layout  Vittasandra  Whitefield  \\\n",
       "0                     False               False        False       False   \n",
       "1                     False               False        False       False   \n",
       "2                     False               False        False       False   \n",
       "3                     False               False        False       False   \n",
       "4                     False               False        False       False   \n",
       "...                     ...                 ...          ...         ...   \n",
       "10233                 False               False        False       False   \n",
       "10234                 False               False        False       False   \n",
       "10237                 False               False        False       False   \n",
       "10238                 False               False        False       False   \n",
       "10241                 False               False        False       False   \n",
       "\n",
       "       Yelachenahalli  Yelahanka  Yelahanka New Town  Yelenahalli  \\\n",
       "0               False      False               False        False   \n",
       "1               False      False               False        False   \n",
       "2               False      False               False        False   \n",
       "3               False      False               False        False   \n",
       "4               False      False               False        False   \n",
       "...               ...        ...                 ...          ...   \n",
       "10233           False      False               False        False   \n",
       "10234           False      False               False        False   \n",
       "10237           False      False               False        False   \n",
       "10238           False      False               False        False   \n",
       "10241           False      False               False        False   \n",
       "\n",
       "       Yeshwanthpur  \n",
       "0             False  \n",
       "1             False  \n",
       "2             False  \n",
       "3             False  \n",
       "4             False  \n",
       "...             ...  \n",
       "10233         False  \n",
       "10234         False  \n",
       "10237         False  \n",
       "10238         False  \n",
       "10241         False  \n",
       "\n",
       "[7239 rows x 243 columns]"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "b1ae0682-62fe-4320-af6e-31d9d2e7bd7f",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0        428.0\n",
       "1        194.0\n",
       "2        235.0\n",
       "3        130.0\n",
       "4        148.0\n",
       "         ...  \n",
       "10233     70.0\n",
       "10234    200.0\n",
       "10237    110.0\n",
       "10238     26.0\n",
       "10241    400.0\n",
       "Name: price, Length: 7239, dtype: float64"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "b1e8858f-4d75-49e8-8a7b-01e1ad9b7709",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "ce78a5a2-09bf-4d63-aebe-cf88acb014f6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>model</th>\n",
       "      <th>best_score</th>\n",
       "      <th>best_params</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>linear_regression</td>\n",
       "      <td>0.847796</td>\n",
       "      <td>{}</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>lasso</td>\n",
       "      <td>0.726823</td>\n",
       "      <td>{'alpha': 2, 'selection': 'random'}</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>decision_tree</td>\n",
       "      <td>0.729609</td>\n",
       "      <td>{'criterion': 'squared_error', 'splitter': 'ra...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               model  best_score  \\\n",
       "0  linear_regression    0.847796   \n",
       "1              lasso    0.726823   \n",
       "2      decision_tree    0.729609   \n",
       "\n",
       "                                         best_params  \n",
       "0                                                 {}  \n",
       "1                {'alpha': 2, 'selection': 'random'}  \n",
       "2  {'criterion': 'squared_error', 'splitter': 'ra...  "
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.model_selection import ShuffleSplit\n",
    "from sklearn.linear_model import Lasso\n",
    "from sklearn.tree import DecisionTreeRegressor\n",
    "from sklearn.linear_model import LinearRegression\n",
    "\n",
    "def best_fit_model(X,y):\n",
    "    algos = {\n",
    "        'linear_regression' : {\n",
    "            'model': LinearRegression(),\n",
    "            'params': {\n",
    "            }\n",
    "        },\n",
    "        'lasso': {\n",
    "            'model': Lasso(),\n",
    "            'params': {\n",
    "                'alpha': [1,2],\n",
    "                'selection': ['random', 'cyclic']\n",
    "            }\n",
    "        },\n",
    "        'decision_tree': {\n",
    "            'model': DecisionTreeRegressor(),\n",
    "            'params': {\n",
    "                'criterion' : ['squared_error','friedman_mse'],\n",
    "                'splitter': ['best','random']\n",
    "            }\n",
    "        }\n",
    "    }\n",
    "    scores = []\n",
    "    cv = ShuffleSplit(n_splits=5, test_size=0.2, random_state=0)\n",
    "    for algo_name, config in algos.items():\n",
    "        gs =  GridSearchCV(config['model'], config['params'], cv=cv, return_train_score=False)\n",
    "        gs.fit(X,y)\n",
    "        scores.append({\n",
    "            'model': algo_name,\n",
    "            'best_score': gs.best_score_,\n",
    "            'best_params': gs.best_params_\n",
    "        })\n",
    "\n",
    "    return pd.DataFrame(scores,columns=['model','best_score','best_params'])\n",
    "\n",
    "best_fit_model(X.values,y.values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "3281f770-6b91-4129-be6b-ee19805feca8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-2 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-2 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-2 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-2 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-2 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-2 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-2 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-2 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-2 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-2 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;LinearRegression<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.linear_model.LinearRegression.html\">?<span>Documentation for LinearRegression</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>LinearRegression()</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "linear_reg = LinearRegression()\n",
    "linear_reg.fit(X_train.values,y_train.values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "8ff302f1-f6e8-4df1-8be4-941e6c13aa30",
   "metadata": {},
   "outputs": [],
   "source": [
    "def Predict_price(location,sqft,bath,bhk):    \n",
    "    loc_index = np.where(X.columns==location)[0][0]\n",
    "\n",
    "    x = np.zeros(len(X.columns))\n",
    "    x[0] = sqft\n",
    "    x[1] = bath\n",
    "    x[2] = bhk\n",
    "    if loc_index >= 0:\n",
    "        x[loc_index] = 1\n",
    "\n",
    "    return int(linear_reg.predict([x])[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "77926f6b-5593-4bc0-a583-9bc3012c49a0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "224"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Predict_price('1st Block Jayanagar',1235,3,2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "54c26f43-ef79-4d7e-a354-82707b914264",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
